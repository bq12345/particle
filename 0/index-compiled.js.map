{"version":3,"sources":["index.js"],"names":[],"mappings":"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","file":"index-compiled.js","sourcesContent":["let image = {};\nlet particles = [];\n//获取canvas元素\nlet canvas = document.getElementById('canvas');\n\n//获取渲染上下文\ncanvas.ctx = canvas.getContext('2d');\n\n//设置画布大小为屏幕宽高\ncanvas.width = document.body.clientWidth;\ncanvas.height = document.body.clientHeight;\n\n//新建一个image对象\nlet img = new Image();\n\n//图像加载完后\nimg.onload = function () {\n    //把图像信息保存在image里面\n    image.w = img.width;\n    image.h = img.height;\n    image.x = 300;\n    image.y = 200;\n\n    //把图像绘制到画布坐标为(300,100)的地方\n    canvas.ctx.drawImage(img, image.x, image.y, image.w, image.h);\n\n    image.imageData = canvas.ctx.getImageData(image.x, image.y, image.w, image.h);\n\n    //计算出符合要求的像素\n    calculate(image.imageData);\n\n    //计算后绘到画布上\n    draw();\n};\n//设置image的source\nimg.src = 'canvas.png';\n\nlet getRandomColor = ()=> {\n    return [\"#4285f4\", \"#ea4335\", \"#fbbc05\", \"#34a853\"][parseInt(Math.random() * 4, 10)];\n};\n\nclass Particle {\n    constructor(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n}\n\n//计算并保存坐标\nfunction calculate(imageData) {\n\n    // 每一行和每一列要显示的粒子\n    let cols = 150, rows = 100;\n    // 每个粒子的实际占位宽高\n    let pw = parseInt(image.w / cols);\n    let ph = parseInt(image.h / rows);\n    let pos = 0;\n    let data = imageData.data;\n    // 划分格子\n    for (let i = 0; i < cols; i++) {\n        for (let j = 0; j < rows; j++) {\n            // 二维数组位置\n            pos = (j * ph * image.w + i * pw) * 4;\n            //判断像素透明度值是否符合要求\n\n            if (data[pos + 1] < 20) {\n                let particle = new Particle(image.x + i * pw + (Math.random() - 0.5) * 10, image.y + j * ph + (Math.random() - 0.5) * 10);\n                // 根据图像不同的色值来设定粒子色值\n                // particle.fillStyle = getRandomColor();\n                particle.fillStyle = getRandomColor();\n\n                if (i % 3 == 0 && j % 3 == 0) {\n                    particle.flotage = true;\n                    //保存开始坐标\n                    particle.startX = particle.x;\n                    particle.startY = particle.y;\n                    //动画执行时间和结束时间\n                    particle.startTime = Date.now() + Math.random() * 20 * 1000;\n                    particle.killTime = Date.now() + Math.random() * 35 * 1000;\n                    //x,y方向的移动速度\n                    particle.speedX = (Math.random() - 0.5) * 0.9;\n                    particle.speedY = (Math.random() - 0.5) * 0.9;\n                }\n\n                //符合要求的粒子保存到数组里\n                particles.push(particle);\n            }\n        }\n    }\n}\n\n//绘图案\nfunction draw() {\n    //清空画布\n    canvas.ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n    let len = particles.length;\n    //当前时间毫秒值\n    let time = Date.now();\n    for (let i = 0; i < len; i++) {\n\n        let p = particles[i];\n        //开始漂浮\n        if (p.flotage && p.startTime < time) {\n            //改变粒子位置\n            p.x += p.speedX;\n            p.y += p.speedY;\n        }\n        //结束时间到了\n        if (p.killTime < time) {\n            //粒子位置复原\n            p.x = p.startX;\n            p.y = p.startY;\n            //重新计算开始时间和结束时间\n            p.startTime = time + parseInt(Math.random() * 20) * 1000;\n            p.killTime = time + parseInt(Math.random() * 35) * 1000;\n        }\n        //设置填充颜色\n        canvas.ctx.fillStyle = p.fillStyle;\n        //绘粒子到画布上\n        canvas.ctx.fillRect(p.x, p.y, 1, 1);\n    }\n\n    //重复绘制\n    requestAnimationFrame(draw);\n}\n"]}